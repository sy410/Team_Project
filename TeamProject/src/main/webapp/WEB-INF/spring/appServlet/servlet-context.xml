<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 
	<resources> : location에 대한 요청이 Spring MVC에 영향을 받아 직접 접근이 불가능한 경우
	                           이를 WAS에게 위임하여 url로 resourse에 직접 접근 할 수 있도록 해줌.    
				* : 0 개 이상의 문자와 매칭 
				** : 0 개 이상의 디렉토리와 화일과 매칭 
				mapping="/resources/**" : /resources/ 의 하위 경로로 접근하는 모든 경로와 파일은
				location="/resources/" : /resources/ 디렉토리 에서 찾아라 ~~~ 
	-->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<context:component-scan base-package="com.ncs.one, service, util,vo" />
	
	<!-- Mybatis 설정 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		=> DAO 에서의 sql 구문을 xml 로 처리
		=> JDBC Connection, Mybatis 설정 : Sql 구문 등..  	-->
		
	<!-- 1) JDBC Connection -->	
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<beans:property name="username" value="system"/>
		<beans:property name="password" value="oracle"/>
	</beans:bean>	
	
	<!-- 2) Mybatis 설정 
		=> SqlSessionFactory -> SqlSessionTemplate 
		2.1) SqlSessionFactory
			- MyBatis 와 연동시 DB 연결과 SQL 실행의 핵심 클래스
			- SqlSessionFactoryBean 에 의해 생성됨  -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml" />
		<!--
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml" />
		 MyBatis 설정 파일의 위치를 지정
		  : 스프링 동작시 같이 동작 하도록, 그러나 스프링에서는 필요없음 (없어도됨) --> 
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" />
		<!-- SQL을 작성 해놓은 xml 파일 (mapper) 의 위치를 지정합니다. 
			=>  mappers 폴더내의 모든 폴더의 *Mapper.xml 을 인식하도록 해줌 
			=>  ** : 없는거 포함 모든 폴더 
	     		*  : 모든 문자  --> 
	</beans:bean>
	
	<!-- 2.2) SqlSessionTemplate
			- SqlSession (interface) 구현클래스
			- DAO 의 DB연결 & Close 기능, 
			- Mapper의 Sql 구문을 이용해 DAO의 요청을 처리
			- sqlSessionFactory 를 생성자로 주입해서 설정  -->	
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>	

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
       ** Image Upload & Download
       1) Upload : MultipartResolver 설정 -->
   <beans:bean id="multipartResolver" 
         class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
      <beans:property name="maxUploadSize" value="-1" />   
   </beans:bean>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   ** JsonView   -->
   <beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" /> 
   <beans:bean id="viewResolver" 
         class="org.springframework.web.servlet.view.BeanNameViewResolver">
      <beans:property name="order" value="1" />
   </beans:bean> 
   
   <!-- ** Image DownLoad 
       => 다운로드를 처리할 ViewResolver 클래스 등록
         => id="download" 와  컨트롤러의 매핑메서드에서 리턴된 view name 과 같아야 한다.    
   <beans:bean id="download" class="downTest.DownloadView"/> -->

</beans:beans>
